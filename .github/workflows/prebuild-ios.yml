#!/bin/bash

# --- regen-ios.sh ---
# Deletes current ios folder, runs prebuild, and patches Podfile

set -e

echo "ðŸ§¹ Removing old ios folder..."
rm -rf ios

echo "ðŸ”§ Running Expo prebuild to regenerate ios folder..."
EXPO_NO_CACHE=true expo prebuild --platform ios --clean --no-install

echo "ðŸ§© Patching Podfile..."
cat > ios/Podfile <<'EOF'
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'BarPals' do
  use_expo_modules!
  use_modular_headers!
  config = use_native_modules!

  post_install do |installer|
    react_native_post_install(installer)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      end
    end
  end
end
EOF

echo "ðŸ“¦ Installing pods..."
cd ios
pod install

echo "âœ… iOS folder regenerated and patched successfully."
